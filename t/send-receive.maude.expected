==========================================
reduce in P-SEND-RECIEVE-TEST : SenderPgm .
result MachineStmt: machine Sender ; {
  var receiver : Receiver ;
  start state Init {
    entry {
      receiver = new Receiver(.Exps) ;
      goto SendRequests ;
    }
  }
  state SendRequests {
    entry {
      send receiver,ePing ;
    }
  }
}
==========================================
reduce in P-SEND-RECIEVE-TEST : ReceiverPgm .
result MachineStmt: machine Receiver ; {
  start state Init {
    on ePing do {
      goto Done ;
    }
  }
}
==========================================
reduce in P-SEND-RECIEVE-TEST : init(SenderPgm
ReceiverPgm) .
result [Cfg]: 
<k>  machine Sender ; {
    var receiver : Receiver ;
    start state Init {
      entry {
        receiver = new Receiver(.Exps) ;
        goto SendRequests ;
      }
    }
    state SendRequests {
      entry {
        send receiver,ePing ;
      }
    }
  }
  machine Receiver ; {
    start state Init {
      on ePing do {
        goto Done ;
      }
    }
  }
</k> 
<machines>  .MachineSchemas
</machines> 
<soup>  
.Cell
</soup>
==========================================
rewrite in P-SEND-RECIEVE-TEST : init(SenderPgm
ReceiverPgm) .
result [Cfg]: 
<k>  .Stmt
</k> 
<machines>  (machine Sender ; {
    var receiver : Receiver ;
    start state Init {
      entry {
        receiver = new Receiver(.Exps) ;
        goto SendRequests ;
      }
    }
    state SendRequests {
      entry {
        send receiver,ePing ;
      }
    }
  }) ;; machine Receiver ; {
    start state Init {
      on ePing do {
        goto Done ;
      }
    }
  }
</machines> 
<soup>  
.Cell
</soup>
Bye.
