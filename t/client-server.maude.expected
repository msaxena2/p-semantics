==========================================
reduce in DECLS-TEST : clientMachine .
result MachineStmt: machine ClientMachine ; {
  var a : int ;
  var server : ServerMachine ;
  var nextReqId : int ;
  var lastRecvSuccessfulReqId : int ;
  var index : int ;
  start state Init {
    entry(.Exps){
      nextReqId = 1 ;
      server = new ServerMachine(.Exps);
      goto StartPumpingRequests ;
    }
  }
  state StartPumpingRequests {
    entry(.Exps){
      index = 0 ;
      while (index < 2){
        send server,eRequest,source = this,id = nextReqId ;
        nextReqId = nextReqId + 1 ;
        index = index + 1 ;
      }
    }
    on eResponse do(payload : responseType){
      lastRecvSuccessfulReqId = payload . id ;
    }
  }
}
==========================================
reduce in DECLS-TEST : serverMachine .
result MachineStmt: machine ServerMachine ; {
  var successful : bool ;
  start state Init {
    on eRequest do(payload : requestType){
      successful = true ;
      send payload . source,eResponse,id = payload . id,success = successful ;
    }
  }
}
==========================================
rewrite in DECLS-TEST : init(main clientMachine
serverMachine) .
result Attributes: 
(machines:
  (machine: ClientMachine
    ,(start: Init)
    ,(states:
      (state: Init
        ,(actions:
          .Actions
        )
,(entry: .Exps,{
          nextReqId = 1 ;
          server = new ServerMachine(.Exps);
          goto StartPumpingRequests ;
        }))
      
      (state: StartPumpingRequests
        ,(actions:
          (action: eResponse,payload : responseType,{
            lastRecvSuccessfulReqId = payload . id ;
          })
        )
,(entry: .Exps,{
          index = 0 ;
          while (index < 2){
            send server,eRequest,source = this,id = nextReqId ;
            nextReqId = nextReqId + 1 ;
            index = index + 1 ;
          }
        }))
      
    )

    ,(initState:
      
        a |-> 0       
        nextReqId |-> 0       
        index |-> 0       
        server |-> 0       
        lastRecvSuccessfulReqId |-> 0      
    ))
   ;; (machine: ServerMachine
    ,(start: Init)
    ,(states:
      (state: Init
        ,(actions:
          (action: eRequest,payload : requestType,{
            successful = true ;
            send payload . source,eResponse,id = payload . id,success = successful ;
          })
        )
)
      
    )

    ,(initState:
      
        successful |-> 0      
    ))
  ) (counter: 2) 
(    
instances: (instance: 0,(code: .Stmt),(variables: 
      a |-> 0     
      this |-> 0     
      nextReqId |-> 3     
      index |-> 2     
      payload |-> id = 2,success = true     
      server |-> 1     
      lastRecvSuccessfulReqId |-> 2    ),(state: StartPumpingRequests),(mid: ClientMachine),(buffer: .Messages)) (instance: 1,(code: .Stmt),(variables: 
      this |-> 1     
      successful |-> true     
      payload |-> source = 0,id = 2    ),(state: Init),(mid: ServerMachine),(buffer: .Messages))
  )
Bye.
