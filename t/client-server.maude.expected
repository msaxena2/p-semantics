==========================================
reduce in DECLS-TEST : clientMachine .
result MachineStmt: machine ClientMachine sends eRequest ; {
  var a : int ;
  var server : ServerClientInterface ;
  var lastRecvSuccessfulReqId : int ;
  state Init {
    entry(payload : ServerClientInterface){
      nextReqId = 1 ;
      server = payload ;
      goto StartPumpingRequests ;
    }
  }
  state StartPumpingRequests {
    entry {
      var index : int ;
      index = 0 ;
      while (index < 2){
        send server,eRequest,source = this to ClientInterface,id = nextReqId ;
        nextReqId = nextReqId + 1 ;
        index = index + 1 ;
      }
    }
    on eResponse do(payload : responseType){
      assert(payload . id > lastRecvSuccessfulReqId);
      lastRecvSuccessfulReqId = payload . id ;
    }
  }
}
==========================================
reduce in DECLS-TEST : serverMachine .
result MachineStmt: machine ServerMachine sends eResponse,eProcessReq ; {
  var helper : HelperInterface ;
  start state Init {
    entry {
      helper = new HelperInterface(this to ServerHelperInterface) ;
      goto WaitForRequests ;
    }
  }
  state WaitForRequests {
    on eRequest do(payload : requestType){
      send helper,eProcessReq,payload . id ;
      receive
        {
          case eReqSuccessful : {
            send payload . source,eResponse,id = payload . id,success = true ;
          }
          case eReqFailed : {
            send payload . source,eResponse,id = payload . id,success = false ;
          }
        }      

    }
  }
}
==========================================
reduce in DECLS-TEST : helperMachine .
result MachineStmt: machine HelperMachine sends eReqSuccessful,eReqFailed ; {
  var server : ServerHelperInterface ;
  start state Init {
    entry(payload : ServerHelperInterface){
      server = payload ;
    }
    on eProcessReq do {
      if ($) {
        send server,eReqSuccessful ;
      }
      else {
        send server,eReqFailed ;
      }
    }
  }
}
Bye.
