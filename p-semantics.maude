in "p-syntax.maude"

mod P-SEMANTICS is including P-SYNTAX .

  --- Configuration
  -----------------

  --- The configuration consists of a AC soup of cells.

  sorts Cell Cfg .
  subsort Cell < Cfg .
  op .Cell : -> Cfg .
  op __ : Cfg Cfg -> Cfg [prec 65 assoc comm id: .Cell] .

  --- The init constructs an initial configuration from a program.

  op init : Stmt -> Cfg .
  -----------------------
  eq init(Ss)
   = <k> Ss </k>
     <machines> .MachineSchemas </machines>
     <soup> .Cell </soup>
   .

  --- Machine Statements
  ----------------------

  --- Machine statements are schema for initializing new machines.
  --- For each machine statement, we load them into the <machine> cell.

  sort MachineSchemas .
  subsort MachineStmt < MachineSchemas .
  op .MachineSchemas : -> MachineSchemas .
  op _ ;; _ : MachineSchemas MachineSchemas -> MachineSchemas [assoc comm id: .MachineSchemas] .

  op <machines>_</machines> : MachineSchemas -> Cell [prec 64 format (ngu o++i n--igu o)] .

  rl <k> ( machine I ; B ) Ss </k>
     <machines> Schemas </machines>
  => <k> Ss </k>
     <machines> ( machine I ; B ) ;; Schemas </machines>
   .

  rl <k> ( main machine I ; B ) Ss </k>
     <machines> Schemas </machines>
  => <k> Ss </k>
     <machines> (main machine I ; B ) ;; Schemas </machines>
   .

  --- For now, we we do not process "sends" clauses, so we ignore them.
  eq machine I sends Exps ; B
   = machine I ; B
   .

  --- The schema for the main machine is used to initialize the machine soup.
  rl <machines> ( main machine I ; B ) ;; Schemas </machines>
     <soup> .Cell </soup>
  => <machines> ( main machine I ; B ) ;; Schemas </machines>
     <soup> ( < 0 | B | .Map > ) </soup> .

  --- Other infrastructure
  ------------------------

  --- The K Sort
  sort K .
  subsort Exp Stmt < K .

  op .K : -> K .

  --- Maps
  sorts Binding Map .
  subsort Binding < Map .

  op .Map : -> Map .
  op _|->_ : Id K -> Binding [prec 60 format (n++i r o --i) ] .

  op __ : Map Map -> Map [prec 62 assoc comm id: .Map] .

  op <k>_</k> : K -> Cell [prec 64 format (ncu o++i n--icu o)] .

  --- "Reference" | "Executing Code" | "State"
  op <_|_|_> : Int K Map -> Cell [prec 63 format (o ni++ --ino n++i --inr on++i --in o)] .
  op <soup>_</soup> : Cell -> Cell [prec 64 format (ncu o++in n--icu p)] .

  var I : Id .
  var B : Block .
  var Ss : Stmt .
  var M : Map .
  var C : Cfg .
  var Exps : Exps .
  var Schemas : MachineSchemas .

endm

