@article{DesaiPLDI17,
  author = {Desai, Ankush and Gupta, Vivek and Jackson, Ethan and Qadeer, Shaz and Rajamani, Sriram and Zufferey, Damien},
  title = {P: Safe Asynchronous Event-Driven Programming},
  year = {2013},
  issue_date = {June 2013},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {48},
  number = {6},
  issn = {0362-1340},
  url = {https://doi.org/10.1145/2499370.2462184},
  doi = {10.1145/2499370.2462184},
  abstract = {We describe the design and implementation of P, a domain-specific language to write asynchronous event driven code. P allows the programmer to specify the system as a collection of interacting state machines, which communicate with each other using events. P unifies modeling and proramming into one activity for the programmer. Not only can a P program be compiled into executable code, but it can also be tested using model checking techniques. P allows the programmer to specify the environment, used to "close" the system during testing, as nondeterministic ghost machines. Ghost machines are erased during compilation to executable code; a type system ensures that the erasure is semantics preserving.The P language is designed so that a P program can be checked for responsiveness---the ability to handle every event in a timely manner. By default, a machine needs to handle every event that arrives in every state. But handling every event in every state is impractical. The language provides a notion of deferred events where the programmer can annotate when she wants to delay processing an event. The default safety checker looks for presence of unhandled events. The language also provides default liveness checks that an event cannot be potentially deferred forever.P was used to implement and verify the core of the USB device driver stack that ships with Microsoft Windows 8. The resulting driver is more reliable and performs better than its prior incarnation (which did not use P); we have more confidence in the robustness of its design due to the language abstractions and verification provided by P.},
  journal = {SIGPLAN Not.},
  month = jun,
  pages = {321â€“332},
  numpages = {12},
  keywords = {verification, systematic testing, domain-specific language, device driver, state machine, event-driven programming}
}

